/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.All_users;
import model.Appointments;
import model.Medical_records;
import net.sf.ehcache.hibernate.HibernateUtil;
import org.hibernate.Query;
import org.hibernate.Session;
import services.All_usersService;
import services.AppointmentsService;
import services.Medical_recordsService;

/**
 *
 * @author antoi
 */
public class AdminPage extends javax.swing.JFrame {

    /**
     * Creates new form AdminPage
     */
    public AdminPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        usersTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        appointmentsTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        medicalRecordsTable = new javax.swing.JTable();
        displayAllAppointmentsBtn = new javax.swing.JButton();
        displayAllUsersBtn = new javax.swing.JButton();
        displayAllMedicalRecordsTable = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        userNameTxt = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 153));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ADMIN PAGE");

        jButton3.setBackground(new java.awt.Color(255, 0, 0));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("DELETE  USER");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(0, 0, 153));

        usersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Full name", "User name", "User type", "Phone number", "Physical address", "Password"
            }
        ));
        jScrollPane1.setViewportView(usersTable);

        appointmentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Full Name", "Date of Birth", "Gender", "Email or Phone ", "Medical ID", "Doctor's speciality", "Appointment Date", "Appointment Time"
            }
        ));
        jScrollPane2.setViewportView(appointmentsTable);

        medicalRecordsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Full Name", "Medical ID", "Allergies", "Past Medical Conditions", "Familiy Medical History", "Immunization History", "Prescriptions", "Blood Pressure", "Heart rate", "Temperature", "Weight and Height", "BMI", "Labo results", "Appointment Date"
            }
        ));
        jScrollPane3.setViewportView(medicalRecordsTable);

        displayAllAppointmentsBtn.setBackground(new java.awt.Color(255, 0, 51));
        displayAllAppointmentsBtn.setForeground(new java.awt.Color(255, 255, 255));
        displayAllAppointmentsBtn.setText("DISPLAY ALL APPOINTMENTS");
        displayAllAppointmentsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayAllAppointmentsBtnActionPerformed(evt);
            }
        });

        displayAllUsersBtn.setBackground(new java.awt.Color(255, 0, 0));
        displayAllUsersBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        displayAllUsersBtn.setForeground(new java.awt.Color(255, 255, 255));
        displayAllUsersBtn.setText("DISPLAY ALL USERS");
        displayAllUsersBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayAllUsersBtnActionPerformed(evt);
            }
        });

        displayAllMedicalRecordsTable.setBackground(new java.awt.Color(255, 0, 0));
        displayAllMedicalRecordsTable.setForeground(new java.awt.Color(255, 255, 255));
        displayAllMedicalRecordsTable.setText("DISPLAY ALL PATIENTS'S MEDICAL RECORDS");
        displayAllMedicalRecordsTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayAllMedicalRecordsTableActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(255, 0, 0));
        jButton5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Log out");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(displayAllUsersBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(458, 458, 458))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(displayAllAppointmentsBtn)
                        .addGap(463, 463, 463))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(displayAllMedicalRecordsTable)
                        .addGap(402, 402, 402))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton5)
                        .addGap(420, 420, 420))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 912, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(157, 157, 157))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 997, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(115, 115, 115))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(displayAllUsersBtn)
                .addGap(31, 31, 31)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayAllAppointmentsBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayAllMedicalRecordsTable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(61, Short.MAX_VALUE))
        );

        jButton6.setBackground(new java.awt.Color(255, 0, 51));
        jButton6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("Update my information");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        userNameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNameTxtActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(255, 0, 0));
        jButton7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton7.setForeground(new java.awt.Color(255, 255, 255));
        jButton7.setText("SEARCH USER");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Enter user's user name");
        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(235, 235, 235)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(userNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(211, 211, 211)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(userNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3)
                            .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(1, 1, 1)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        //HERE WE WANT TO DELETE THE USER
        /*String deletingUsername = userNameTxt.getText();

        try {
            conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/patients_and_appointments_mgt_db", "postgres", "1234");
            String query = "DELETE FROM allusers WHERE user_name = ?";

            pst = conn.prepareStatement(query);
            pst.setString(1, deletingUsername);

            int rowsAffected = pst.executeUpdate(); // Use executeUpdate for DELETE operations

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "User deleted with success");
            } else {
                JOptionPane.showMessageDialog(this, "No user found with that username");
            }
        } catch(Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                // Close resources in a finally block to ensure they're closed even if an exception occurs
                if (rs != null) rs.close();
                if (pst != null) pst.close();
                if (conn != null) conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }*/
    }//GEN-LAST:event_jButton3ActionPerformed

    private void displayAllAppointmentsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayAllAppointmentsBtnActionPerformed
        // TODO add your handling code here:
        //HERE WE DISPLAY ALL THE APPOINTMENTS
        try {
        Registry registry = LocateRegistry.getRegistry("127.0.0.1", 6000);
        AppointmentsService service = (AppointmentsService) registry.lookup("theAppointment");

        List<Appointments> appointmentList = service.getAllAppointments();

        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Full Name");
        model.addColumn("Date of Birth");
        model.addColumn("Gender");
        model.addColumn("Email or Phone");
        model.addColumn("Medical ID");
        model.addColumn("Doctor Speciality");
        model.addColumn("Appointment Date");
        model.addColumn("Appointment Time");

        for (Appointments appointment : appointmentList) {
            model.addRow(new Object[]{
                appointment.getFullname(),
                appointment.getDate_of_birth(),
                appointment.getGender(),
                appointment.getEmail_or_phone(),
                appointment.getMedical_id(),
                appointment.getDoctor_speciality(),
                appointment.getAppointment_date(),
                appointment.getApppointment_time()
            });
        }

        appointmentsTable.setModel(model);
        JOptionPane.showMessageDialog(this, "Appointments data displayed successfully!");

    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error fetching appointments. Please try again.");
    }
    }//GEN-LAST:event_displayAllAppointmentsBtnActionPerformed

    private void displayAllUsersBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayAllUsersBtnActionPerformed
        // TODO add your handling code here:
        //HERE WE DISPLAY ALL THE USERS
       try {
        // Call the method to retrieve all users
        Registry registry = LocateRegistry.getRegistry("127.0.0.1", 6000);
        All_usersService service = (All_usersService) registry.lookup("theUser");
        List<All_users> userList = service.getAllUsers();

        // Display the users in a JTable
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Full Name");
        model.addColumn("Username");
        model.addColumn("User Type");
        model.addColumn("Phone Number");
        model.addColumn("Physical Address");
        model.addColumn("Password");

        for (All_users user : userList) {
            model.addRow(new Object[]{
                user.getFull_name(),
                user.getUser_name(),
                user.getUser_type(),
                user.getPhone_number(),
                user.getPhysical_address(),
                user.getPassword()
            });
        }

        // Assuming usersTable is the name of your JTable
        usersTable.setModel(model);

        JOptionPane.showMessageDialog(this, "All users displayed successfully!");

    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error fetching users. Please try again.");
    }
    }//GEN-LAST:event_displayAllUsersBtnActionPerformed

    private void displayAllMedicalRecordsTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayAllMedicalRecordsTableActionPerformed
        // TODO add your handling code here:
        //HERE WE DISPLAY ALL THE PATIENTS'S RECORDS
        try {
        Registry registry = LocateRegistry.getRegistry("127.0.0.1", 6000);

        // Look up the MedicalRecordsService (assuming the service is named MedicalRecordsService)
        Medical_recordsService service = (Medical_recordsService) registry.lookup("themedrecord");

        // Call the method to retrieve all medical records
        List<Medical_records> medicalRecordsList = service.getAllMedicalRecords();

        // Create a table model for the JTable
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Full Name");
        model.addColumn("Medical ID");
        model.addColumn("Allergies");
        model.addColumn("Past Medical History");
        model.addColumn("Family Medical History");
        model.addColumn("Immunization History");
        model.addColumn("Prescriptions");
        model.addColumn("Blood Pressure");
        model.addColumn("Heart rate");
        model.addColumn("Temperature");
        model.addColumn("Weight and Height");
        model.addColumn("BMI");
        model.addColumn("Labo Results");
        model.addColumn("Appointment Date");
        

        // Add the medical records to the table model
        for (Medical_records record : medicalRecordsList) {
            model.addRow(new Object[]{
                record.getFull_name(),
                record.getMedical_id(),
                record.getAllergies(),
                record.getPast_medical_conditions(),
                record.getFamily_medical_history(),
                record.getImmunization_history(),
                record.getPrescriptions(),
                record.getBlood_pressure(),
                record.getHeart_rate(),
                record.getTemperature(),
                record.getWeight_and_height(),
                record.getBmi(),
                record.getLabo_results(),
                record.getAppointment_date(),
            });
        }

        // Set the table model to the JTable (assuming medicalRecordsTable is the JTable name)
        medicalRecordsTable.setModel(model);
        JOptionPane.showMessageDialog(this, "Medical records displayed successfully!");

    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error fetching medical records. Please try again.");
    }
    }//GEN-LAST:event_displayAllMedicalRecordsTableActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        LoginPage logPage = new LoginPage();
        logPage.show();
        this.hide();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        //WE GO TO THE UPDATING PAGE
        UpdatingPage updatePage = new UpdatingPage();
        updatePage.show();
        this.hide();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void userNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userNameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userNameTxtActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        //HERE WE DISPLAY THE RESULTS OF THE SEARCH OF THE USER
        try {
        String userName = userNameTxt.getText(); // Get the user_name from some input field

        Registry registry = LocateRegistry.getRegistry("127.0.0.1", 6000);

        // Look up the UserService (assuming the service is named UserService)
        All_usersService service = (All_usersService) registry.lookup("theUser");
        
        // Call the method to retrieve a single user by username
        All_users user = service.getUserByUsername(userName);

        // Display the retrieved user in a JTable
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Full Name");
        model.addColumn("Username");
        model.addColumn("User Type");
        model.addColumn("Phone Number");
        model.addColumn("Physical Address");
        model.addColumn("Password");

        // Add the retrieved user to the table model
        if (user != null) {
            model.addRow(new Object[]{
                user.getFull_name(),
                user.getUser_name(),
                user.getUser_type(),
                user.getPhone_number(),
                user.getPhysical_address(),
                user.getPassword()
            });
            
            // Assuming usersTable is the name of your JTable
            usersTable.setModel(model);
            JOptionPane.showMessageDialog(this, "User data found and displayed successfully!");
        }else {
            JOptionPane.showMessageDialog(this, "User not found!");
        }

        

    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error fetching user data. Please try again.");
    }

    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable appointmentsTable;
    private javax.swing.JButton displayAllAppointmentsBtn;
    private javax.swing.JButton displayAllMedicalRecordsTable;
    private javax.swing.JButton displayAllUsersBtn;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable medicalRecordsTable;
    private javax.swing.JTextField userNameTxt;
    private javax.swing.JTable usersTable;
    // End of variables declaration//GEN-END:variables
}
